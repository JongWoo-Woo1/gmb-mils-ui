GPT–Git Integrate Quick Manual
===============================

목적: VS Code + Windows 환경에서 기본 Git 흐름을 빠르게 사용하고,
저와 같은 스냅샷 기준(커밋 해시)을 공유하기 위한 최소 명령 모음입니다.

---
1) (최초 1회) 원격 연결 & 업스트림 설정
--------------------------------------
git push -u origin main

- 현재 브랜치(main)를 GitHub의 origin/main으로 처음 푸시합니다.
- -u(= --set-upstream) 옵션으로 “업스트림”을 연결해 두기 때문에,
  다음부터는 단순히 `git push`만 해도 같은 곳으로 푸시됩니다.
- 새 브랜치를 처음 올릴 때도 같은 패턴으로 사용합니다: `git push -u origin my-branch`

언제 쓰나?  ✔️ 첫 푸시/새 브랜치 첫 푸시 때  |  ✖️ 그 이후엔 필요 없음

---
2) 변경사항 스테이징(추가/수정/삭제 모두 포함)
---------------------------------------------
git add -A

- 작업 디렉터리의 변경 전체를 “스테이징 영역”에 올립니다.
- 신규 파일, 수정, 삭제까지 전부 포함합니다.
  (참고) `git add .`는 삭제가 빠질 수 있으므로 초보자는 `-A`를 권장합니다.

언제 쓰나?  ✔️ 커밋하기 직전, 변경을 전부 올릴 때

---
3) 스냅샷 만들기(메시지와 함께)
---------------------------------
git commit -m "feat: something"

- 스테이징된 변경을 하나의 스냅샷(커밋)으로 기록합니다.
- 따옴표 안은 커밋 메시지입니다. 예) `feat: add PNG export script`
  (선택) Conventional Commits 형태를 쓰면 기록이 보기 좋습니다: feat/fix/docs/chore 등

언제 쓰나?  ✔️ 의미 있는 단위로 저장할 때(에러가 없고 빌드/런이 되는 지점이면 가장 좋음)

---
4) 커밋을 GitHub로 보내기
-------------------------
git push

- 현재 브랜치의 커밋들을 업스트림(origin/main 등)으로 업로드합니다.
- 1)에서 `-u`로 업스트림을 설정해두었기 때문에 브랜치 이름을 다시 적을 필요가 없습니다.
- 만약 “rejected” 오류가 나면, 원격에 최신 커밋이 있음을 뜻합니다.
  다음 순서로 동기화 후 다시 `git push` 하세요:
    git pull --rebase
    # 충돌 나면 파일을 고치고 add/continue
    git rebase --continue   (필요 시)
    git push

언제 쓰나?  ✔️ 로컬에서 커밋한 것을 GitHub에 반영할 때

---
5) 현재 스냅샷 ID(짧은 해시) 확인
----------------------------------
git rev-parse --short HEAD

- 현재 체크아웃된 커밋(HEAD)의 “짧은 해시”를 출력합니다. 예) `a1b2c3d`
- 이 값을 저에게 알려주면, 같은 스냅샷을 기준으로 리뷰/토의를 진행할 수 있습니다.
- 프로젝트 노트/채팅에 `baseline: a1b2c3d`처럼 기록해 두면 드리프트를 방지할 수 있습니다.

언제 쓰나?  ✔️ 협업/리뷰 시 기준 스냅샷을 공유할 때

---
작업 루틴(요약)
----------------
# 변경 작업 → 테스트/빌드 확인
git add -A
git commit -m "feat: ..."
git push
git rev-parse --short HEAD   # ← 이 해시를 공유

유용한 참고
-----------
- 현재 상태 확인:        git status
- 변경 요약 보기:        git diff --stat
- 원격 주소 확인:        git remote -v
- 브랜치/업스트림 확인:  git branch -vv

주의사항
--------
- node_modules/, dist/ 등은 .gitignore에 포함하세요.
- 줄바꿈 경고(LF/CRLF)는 기능엔 영향이 없지만, 나중에 .gitattributes로 정리하면 더 깔끔합니다.


-------

npm run review
git add -A
git commit -m "feat: new pupetter and error"
git push
git rev-parse --short HEAD   # ← 이 해시를 채팅 맨 앞에 붙여줘